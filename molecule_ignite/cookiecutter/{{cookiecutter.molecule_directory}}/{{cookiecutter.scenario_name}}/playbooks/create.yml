{% raw -%}
- set_fact:
    kernel_name: "{{ item.kernel_name | default(default_kernel.name) }}"

- set_fact:
    kernel_tag: "{{ item.kernel_tag | default(default_kernel.tag) }}"

- set_fact:
    image_name: "{{ item.image_name | default(default_image.name) }}"

- set_fact:
    image_tag: "{{ item.image_tag | default(default_image.tag) }}"

- name: Check kernel state
  command: |
    ignite inspect kernel {{ kernel_name }}:{{ kernel_tag }}
  ignore_errors: True
  register: kernel_exists

- name: Import kernel image
  run_once: True
  command: |
    ignite kernel import  {{ kernel_name }}:{{ kernel_tag }}
  when: kernel_exists.rc == 1

- name: Check image state
  command: |
    ignite inspect image {{ image_name }}:{{ image_tag }}
  ignore_errors: True
  register: image_exists

- name: Import image
  run_once: true
  command: |
    ignite image import {{ image_name }}:{{ image_tag }}
  when: image_exists.rc == 1

- name: Check vm state
  command: |
    ignite inspect vm {{ item.name }}
  ignore_errors: True
  register: vm_exists

- name: Create VM
  command: |
    ignite run {{ image_name }}:{{ image_tag }}
    --cpus {{ item.cpus }}
    --memory {{ item.memory }}
    {% if item.public_key_path is defined %}--ssh={{ item.public_key_path }}{% else %}--ssh {% endif %}
    --name {{ item.name }}
  when: vm_exists.rc == 1
  register: server
  async: 7200
  poll: 0

- name: Wait for instance creation to complete
  async_status:
    jid: "{{ server.ansible_job_id }}"
  register: os_jobs
  until: os_jobs.finished
  retries: 300

- name: Inspect running VM
  command: |
    ignite inspect vm {{ item.name }}
  register: running_vm

- set_fact:
    vm_results: "{{ running_vm.stdout | from_json }}"

- name: Populate instance config dict
  set_fact:
    instance_conf_dict: {
      'instance': "{{ vm_results.metadata.name }}",
      'instance_id': "{{ vm_results.metadata.uid }}",
      'address': "{{ vm_results.status.network.ipAddresses[0] }}",
      'user': "{{ item.user }}",
      'port': "{{ item.port | default('22') }}",
      'identity_file': "/var/lib/firecracker/vm/id_{{ vm_results.metadata.uid }}",
    }
  register: instance_config_dict
  when: server.changed | bool

- debug:
    var: molecule_instance_config

- name: Convert instance config dict to a list
  set_fact:
    instance_conf: "{{ instance_config_dict.ansible_facts.instance_conf_dict | list }}"

- debug:
    var: instance_conf

- name: Dump instance config
  copy:
    content: "{{ instance_conf | to_json | from_json | to_yaml }}"
    dest: "{{ molecule_instance_config }}"
  when: server.changed | bool

{%- endraw %}
